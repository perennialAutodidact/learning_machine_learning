# -*- coding: utf-8 -*-
"""Copy of support_vector_regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16GqR76TiOb7hrXbiaTgth1UbkZ2iZVP3

# Support Vector Regression (SVR)

## Importing the libraries
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

"""## Importing the dataset"""

dataset = pd.read_csv('Position_Salaries.csv')
X = dataset.iloc[:, 1:-1].values
y = dataset.iloc[:, -1].values

print(X)
print(y)

"""## Feature Scaling"""

# convert dependent variable from list to array
y = y.reshape(len(y), 1)
print(y)

"""## Training the SVR model on the whole dataset"""

from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVR

# create standard scaler for each column that needs scaling because they
# have different averages and therefore will scale differently
standard_scaler_X = StandardScaler()
X = standard_scaler_X.fit_transform(X)

standard_scaler_y = StandardScaler()
y = standard_scaler_y.fit_transform(y)

# instantiate SVR with the "radial-basis function"
sv_regressor = SVR(kernel='rbf')

sv_regressor.fit(X, y)

print(X)

print(y)

"""## Predicting a new result"""

# scale test value using the same scaler
scaled_test_X = standard_scaler_X.transform([[6.5]])
# make a prediction using the SVR model and reshape it into a 2D array
prediction = sv_regressor.predict(scaled_test_X).reshape(-1,1)

standard_scaler_y.inverse_transform(prediction)

"""## Visualising the SVR results"""

# real results
# inverse the scaling for X and y
unscaled_X = standard_scaler_X.inverse_transform(X)
unscaled_y = standard_scaler_y.inverse_transform(y)
plt.scatter(unscaled_X, unscaled_y, color='red')

# plot SVR predictions
# predict based on X because X is already scaled
y_pred = sv_regressor.predict(X).reshape(-1, 1)
y_pred = standard_scaler_y.inverse_transform(y_pred)
plt.plot(unscaled_X, y_pred, color='blue')

# title & labels
plt.title('Truth or Bluff (SVR)')
plt.xlabel('Position Level')
plt.ylabel('Salary')

# show the graph
plt.show()

"""## Visualising the SVR results (for higher resolution and smoother curve)"""

# increase grid resolution
X_grid = np.arange(min(unscaled_X), max(unscaled_X), 0.1)
X_grid = X_grid.reshape((len(X_grid), 1))

# real results
plt.scatter(unscaled_X, unscaled_y, color='red')

# plot polynomial predictions
X_grid_scaled = standard_scaler_X.transform(X_grid)
y_pred = sv_regressor.predict(X_grid).reshape(-1,1)
unscaled_y_pred = standard_scaler_y.inverse_transform(y_pred)
plt.plot(X_grid, unscaled_y_pred, color='blue')

# title & labels
plt.title('Truth or Bluff (SVR)')
plt.xlabel('Position Level')
plt.ylabel('Salary')

# show the graph
plt.show()